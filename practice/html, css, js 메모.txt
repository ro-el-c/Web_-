<!--
※ index.html ※

태그
- 속성 : 태그 우측 <> 없이, 태그의 이름만으로 부족할 때 더 많은 의미 부여 가능

<head>
  title : 파비콘 옆 사이트 제목
  meta
  - charset : 문자 규칙 ; character set
</head>

※ 태그의 황제 ※
a : 링크
- href ; 링크 참조 hypertext reference
- target="_blank" : 새 창으로 열기
- title="(내용)" : 링크가 무엇인지 툴 팁으로 알려줌

<body>
  h : 제목, headings
  strong : 강조 bold체
  u : 밑줄, underline
  br : 줄바꿈
  p : 단락 나누기, paragraph ; 정해져있는 여백만큼만 벌어짐 -> css로 조절 가능
  img : 이미지
  - src ; source
  - width
  iframe : 다른 html 페이지 삽입 ; Inline Frame

  ※ 부모, 자식 관계
  li : 목차, 목록 ; list
  => ul : grouping ; Unordered List
  => ol : grouping - numbering ; Ordered List
</body>
-->

<!--
css
style(속성)
ex) <p style="margin-top:30px;">
margin : 태그와 태그 사이 여백
top : 태그 윗쪽

css selctor ; 선택자
https://www.w3schools.com/cssref/css_selectors.asp

//

<head> </head> 안에 <style> </style>

<!--
  css
  a : Selector 선택자,
  Declaration 선언/효과
  Property 속성, Value 그 값
  -> 여러가지 효과 ; 으로 구분
-->

element : tag 선택자 ; Selects all <p> elements // 내 코드 ex : a

.class값 : class 선택자 ; class값을 가지는 모든 태그
=> 	Selects all elements with class="intro"

#id값 : 아이디 선택자
=>	Selects the element with id="firstname"

선택자 우선순위
구체적인 것 > 포괄적인 것
;
id 선택자 > class 선택자 > tag 선택자
;
id 선택자 vs class 선택자 => id 선택자 win
class 선택자 vs tag 선택자 => class 선택자 win

//

※ block.html ※

/*
block level element
*/
h1{
  border-width:5px;
  border-color:skyblue;
  border-style:solid;
  <!--text-align:center;-->
}
/*
inline element
*/
a{
  border-width:5px;
  border-color:skyblue;
  border-style:solid;
  <!--display:block;  => 전체 화면에 적용되도록-->
}
/*
border-width:5px;       테두리 두께
border-color:skyblue;   테두리 색깔
border-style:solid;     테두리 스타일 ; 단선 점선 실선 등
*/

과 동일한 코드
h1.a{
  border:5px solid skyblue;
  <!-- 5px solid skyblue 순서 상관 X -->
}

//

※ grid.html ※
-->


<!--
head body html title meta
div a script link img
p span li ul br
style h1 h2 input form
strong h3 table tr td
-->

//

== : Boolean ; 변수의 값이 같으면 참, 타입 상관 X
=== : Boolean ; 변수의 값과 타입까지 같아야 참

부등호 html 파일에서 그대로 사용 불가능
<  ==  &lt;
>  ==  &gt;

//

3.html

<!--
  <input type="button" value="night" style="float:right" onclick="
  document.querySelector('body').style.backgroundColor='gray';
  document.querySelector('body').style.color='white';
  ">
  <input type="button" value="day" style="float:right" onclick="
  document.querySelector('body').style.backgroundColor='white';
  document.querySelector('body').style.color='black';
  ">
-->

버튼을 하나로

<input id="night_day" type="button" value="night" style="float:right" onclick="
if(document.querySelector('#night_day').value === 'night'){
  document.querySelector('body').style.backgroundColor='gray';
  document.querySelector('body').style.color='white';
  document.querySelector('#night_day').value = 'day';
}
else{
  document.querySelector('body').style.backgroundColor='white';
  document.querySelector('body').style.color='black';
  document.querySelector('#night_day').value = 'night';
}
">

코드를 효율적으로 : document.querySelector('#night_day') => this

<!-- this : 해당 태그 안의 값 -->
  <input type="button" value="night" style="float:right"onclick="
  if(this.value === 'night'){
    document.querySelector('body').style.backgroundColor='gray';
    document.querySelector('body').style.color='white';
    this.value = 'day';
  }
  else{
    document.querySelector('body').style.backgroundColor='white';
    document.querySelector('body').style.color='black';
    this.value = 'night';
  }
  ">

refactoring 리팩토링
동작하는 것은 그대로 두고, 코드를 효율적으로 만들어서 가독성을 높이고 유지, 보수하기 편리하게 만들고 중복된 코드를 낮추도록 개선하는 과정
